"""
PineScript export module.
Converts strategy logic to TradingView PineScript v5.
"""

from typing import Dict, Any, List
from pathlib import Path
import structlog

logger = structlog.get_logger(__name__)


def generate_pinescript_strategy(strategy_config: Dict[str, Any]) -> str:
    """Generate PineScript code for a strategy."""
    name = strategy_config.get("name", "OneMark Strategy")
    description = strategy_config.get("description", "Exported from One Market")
    
    # Extract parameters
    ma_fast = strategy_config.get("ma_fast", 20)
    ma_slow = strategy_config.get("ma_slow", 50)
    rsi_period = strategy_config.get("rsi_period", 14)
    rsi_ob = strategy_config.get("rsi_ob", 70)
    rsi_os = strategy_config.get("rsi_os", 30)
    atr_period = strategy_config.get("atr_period", 14)
    atr_sl_mult = strategy_config.get("atr_sl_mult", 2.0)
    atr_tp_mult = strategy_config.get("atr_tp_mult", 3.0)
    risk_pct = strategy_config.get("risk_pct", 0.02)
    
    script = f"""//@version=5
strategy("{name}", overlay=true, initial_capital=100000, default_qty_type=strategy.percent_of_equity, default_qty_value={risk_pct * 100}, commission_type=strategy.commission.percent, commission_value=0.1)

// ============================================================
// {description}
// Generated by One Market Platform
// ============================================================

// === PARAMETERS ===

// Moving Averages
ma_fast_period = input.int({ma_fast}, "MA Fast Period", minval=5)
ma_slow_period = input.int({ma_slow}, "MA Slow Period", minval=10)

// RSI
rsi_period = input.int({rsi_period}, "RSI Period", minval=5)
rsi_overbought = input.float({rsi_ob}, "RSI Overbought", minval=50, maxval=100)
rsi_oversold = input.float({rsi_os}, "RSI Oversold", minval=0, maxval=50)

// ATR Stop Loss & Take Profit
atr_period = input.int({atr_period}, "ATR Period", minval=5)
atr_sl_multiplier = input.float({atr_sl_mult}, "ATR SL Multiplier", minval=0.5, step=0.1)
atr_tp_multiplier = input.float({atr_tp_mult}, "ATR TP Multiplier", minval=1.0, step=0.1)

// Risk Management
risk_per_trade = input.float({risk_pct * 100}, "Risk Per Trade (%)", minval=0.1, maxval=10.0, step=0.1) / 100

// Entry Band
entry_band_beta = input.float(0.003, "Entry Band Beta", minval=0.0001, maxval=0.01, step=0.0001)

// Trading Hours (UTC-3)
use_trading_hours = input.bool(true, "Use Trading Windows")
window_a_start = input.session("0900-1230", "Window A")
window_b_start = input.session("1400-1700", "Window B")

// === INDICATORS ===

// Moving Averages
ema_fast = ta.ema(close, ma_fast_period)
ema_slow = ta.ema(close, ma_slow_period)

// RSI
rsi = ta.rsi(close, rsi_period)
rsi_regime_long = rsi > 50
rsi_regime_short = rsi < 50

// ATR
atr = ta.atr(atr_period)

// VWAP Intraday (reset daily)
vwap_intraday = ta.vwap(close)

// === SIGNAL GENERATION ===

// MA Crossover Signal
ma_cross_long = ta.crossover(ema_fast, ema_slow)
ma_cross_short = ta.crossunder(ema_fast, ema_slow)

// RSI Pullback Signal
rsi_pullback_long = rsi_regime_long and rsi < 60 and rsi > 40 and rsi[1] < rsi
rsi_pullback_short = rsi_regime_short and rsi > 40 and rsi < 60 and rsi[1] > rsi

// Combined Signal (simplified ensemble)
signal_long = (ma_cross_long or rsi_pullback_long)
signal_short = (ma_cross_short or rsi_pullback_short)

// === ENTRY BAND ===

entry_mid = vwap_intraday
entry_low_long = entry_mid * (1 - entry_band_beta)
entry_high_long = entry_mid * (1 + entry_band_beta)
entry_low_short = entry_mid * (1 - entry_band_beta)
entry_high_short = entry_mid * (1 + entry_band_beta)

// === TRADING WINDOW CHECK ===

in_window = not use_trading_hours or (time(timeframe.period, window_a_start) or time(timeframe.period, window_b_start))

// === STOP LOSS & TAKE PROFIT ===

var float entry_price = na
var float stop_loss = na
var float take_profit = na

if signal_long and in_window and strategy.position_size == 0 and low <= entry_high_long and high >= entry_low_long
    entry_price := entry_mid
    stop_loss := entry_price - atr * atr_sl_multiplier
    take_profit := entry_price + atr * atr_tp_multiplier
    strategy.entry("Long", strategy.long, stop=entry_high_long, limit=entry_low_long, comment="Long Entry")

if signal_short and in_window and strategy.position_size == 0 and high >= entry_low_short and low <= entry_high_short
    entry_price := entry_mid
    stop_loss := entry_price + atr * atr_sl_multiplier
    take_profit := entry_price - atr * atr_tp_multiplier
    strategy.entry("Short", strategy.short, stop=entry_low_short, limit=entry_high_short, comment="Short Entry")

// === EXIT CONDITIONS ===

if strategy.position_size > 0
    strategy.exit("Exit Long", "Long", stop=stop_loss, limit=take_profit, comment="Exit Long")

if strategy.position_size < 0
    strategy.exit("Exit Short", "Short", stop=stop_loss, limit=take_profit, comment="Exit Short")

// Forced close at end of day (16:45 UTC-3 = 19:45 UTC)
force_close_time = timestamp(year, month, dayofmonth, 19, 45, 0)
if time >= force_close_time and strategy.position_size != 0
    if strategy.position_size > 0
        strategy.close("Long", comment="Forced Close")
    if strategy.position_size < 0
        strategy.close("Short", comment="Forced Close")

// === PLOTTING ===

// EMAs
plot(ema_fast, "EMA Fast", color=color.blue, linewidth=2)
plot(ema_slow, "EMA Slow", color=color.orange, linewidth=2)

// Entry Band (Long)
plot(signal_long ? entry_low_long : na, "Entry Low", color=color.new(color.green, 80), style=plot.style_linebr)
plot(signal_long ? entry_high_long : na, "Entry High", color=color.new(color.green, 80), style=plot.style_linebr)
fill_long = plot(signal_long ? entry_mid : na, "Entry Mid", color=color.new(color.green, 100))
fill_high = plot(signal_long ? entry_high_long : na, display=display.none)
fill(fill_long, fill_high, color=color.new(color.green, 90))

// Entry Band (Short)
plot(signal_short ? entry_low_short : na, "Entry Low Short", color=color.new(color.red, 80), style=plot.style_linebr)
plot(signal_short ? entry_high_short : na, "Entry High Short", color=color.new(color.red, 80), style=plot.style_linebr)

// SL & TP Lines
plot(strategy.position_size != 0 ? stop_loss : na, "Stop Loss", color=color.red, linewidth=2, style=plot.style_linebr)
plot(strategy.position_size != 0 ? take_profit : na, "Take Profit", color=color.green, linewidth=2, style=plot.style_linebr)

// Background for trading windows
bgcolor(in_window ? color.new(color.green, 95) : na, title="Trading Window")

// === ALERTS ===

alertcondition(signal_long, title="Long Signal", message="One Market: LONG signal on {{{{ticker}}}}")
alertcondition(signal_short, title="Short Signal", message="One Market: SHORT signal on {{{{ticker}}}}")
"""
    
    return script


def export_to_file(script: str, output_path: str) -> bool:
    """Export PineScript to file."""
    try:
        path = Path(output_path)
        path.parent.mkdir(parents=True, exist_ok=True)
        path.write_text(script, encoding='utf-8')
        logger.info("pinescript_exported", path=str(path))
        return True
    except Exception as e:
        logger.error("pinescript_export_failed", error=str(e))
        return False


def generate_indicator_script(indicator_name: str, params: Dict[str, Any]) -> str:
    """Generate PineScript indicator (not strategy)."""
    if indicator_name == "combined_signal":
        script = """//@version=5
indicator("One Market - Combined Signal", overlay=false)

// Combined signal strength indicator
// Based on One Market ensemble methodology

// Parameters
ma_fast = input.int(20, "MA Fast")
ma_slow = input.int(50, "MA Slow")
rsi_period = input.int(14, "RSI Period")

// Indicators
ema_fast = ta.ema(close, ma_fast)
ema_slow = ta.ema(close, ma_slow)
rsi = ta.rsi(close, rsi_period)

// Signals
ma_signal = (ema_fast > ema_slow) ? 1 : (ema_fast < ema_slow) ? -1 : 0
rsi_signal = (rsi > 50) ? 1 : (rsi < 50) ? -1 : 0

// Combined
combined_signal = (ma_signal + rsi_signal) / 2

// Plot
plot(combined_signal, "Combined Signal", color=combined_signal > 0 ? color.green : color.red, linewidth=2)
hline(0, "Zero Line", color=color.gray, linestyle=hline.style_dashed)
hline(0.5, "Long Threshold", color=color.green, linestyle=hline.style_dotted)
hline(-0.5, "Short Threshold", color=color.red, linestyle=hline.style_dotted)

// Background
bgcolor(combined_signal > 0.5 ? color.new(color.green, 90) : combined_signal < -0.5 ? color.new(color.red, 90) : na)
"""
        return script
    
    return ""


if __name__ == "__main__":
    # Example: Generate strategy
    config = {
        "name": "One Market Strategy",
        "description": "Daily trading system with ATR-based risk management",
        "ma_fast": 20,
        "ma_slow": 50,
        "rsi_period": 14,
        "rsi_ob": 70,
        "rsi_os": 30,
        "atr_period": 14,
        "atr_sl_mult": 2.0,
        "atr_tp_mult": 3.0,
        "risk_pct": 0.02
    }
    
    script = generate_pinescript_strategy(config)
    
    # Save to file
    output_path = "exports/one_market_strategy.pine"
    if export_to_file(script, output_path):
        print(f"✅ PineScript exported to {output_path}")
        print(f"\n📋 Preview:\n{script[:500]}...")
    else:
        print("❌ Export failed")

